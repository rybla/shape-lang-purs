module Test.Main where

import Data.Tuple.Nested
import Language.Shape.Stlc.ChAtIndex
import Language.Shape.Stlc.Index
import Language.Shape.Stlc.Metadata
import Language.Shape.Stlc.Recursor.Action
import Language.Shape.Stlc.Syntax
import Language.Shape.Stlc.Types
import Prelude
import Prim hiding (Type)
import Data.Array (foldM)
import Data.Either (Either(..))
import Data.List (List(..), (:))
import Data.Map (Map)
import Data.Map.Unsafe as Map
import Data.Maybe (Maybe(..))
import Data.Set (fromFoldable)
import Data.Tuple (Tuple(..))
import Data.UUID as UUID
import Debug as Debug
import Effect (Effect)
import Effect.Console as Console
import Language.Shape.Stlc.Changes (TypeChange(..))
import Partial.Unsafe (unsafeCrashWith)
import Undefined (undefined)
import Unsafe (fromJust)

main :: Effect Unit
main = do
  -- runActions (Map.lookup' "enlambda in let impl" histories)
  -- runActions (Map.lookup' "enArrow codomain" histories)
  -- runActions (Map.lookup' "enArrow then dig hole in function" tests)
  -- runActions (Map.lookup' "double lambda" tests)
  runActions (Map.lookup' "set x as definition of x" tests)

runActions :: ((Type /\ Term) /\ Array Change) -> Effect Unit
runActions ((type_ /\ term) /\ changes) = do
  let
    res =
      foldM
        ( \st change -> case applyChange change st of
            Just st' -> Right st'
            Nothing -> Left (st /\ change)
        )
        { term
        , type_
        , mb_ix: Just $ nilIxDown
        , history: []
        , clipboard: Nothing
        , dragboard: Nothing
        , highlights: []
        , mode: NormalMode
        }
        changes
  case res of
    Right _st -> do
      Console.log $ "===[ runActions success ]==="
    Left (st /\ change) -> do
      Console.log $ "===[ runActions failure ]==="
      Console.log $ "===[ runActions failure: last valid state ]==="
      Console.log $ show st.term
      Console.log $ "===[ runActions failure: last change attempted on last valid state ]==="
      Console.log $ show change
  pure unit

tests :: Map String ((Type /\ Term) /\ Array Change)
tests =
  Map.fromFoldable
    [ "double lambda" /\ (Tuple (Tuple (HoleType { holeId: (HoleId (fromJust (UUID.parseUUID "68d563e8-cc81-4a5b-8096-60c7e78f2869"))), meta: HoleTypeMetadata {}, weakening: (fromFoldable []) }) (Data { body: (Let { body: (Hole { meta: HoleMetadata {} }), impl: (Lam { body: (Hole { meta: HoleMetadata {} }), meta: LamMetadata { indentedBody: false, name: Name Nothing }, termBind: { meta: TermBindMetadata { name: Name Nothing }, termId: (TermId (fromJust (UUID.parseUUID "5a173d70-f374-4f41-a850-1bb82ef3524c"))) } }), meta: LetMetadata { indentedBody: true, indentedImpl: false, indentedSign: false, name: Name Nothing }, sign: (ArrowType { cod: (HoleType { holeId: (HoleId (fromJust (UUID.parseUUID "a3fa3bea-0d96-4530-af90-6bac83976672"))), meta: HoleTypeMetadata {}, weakening: (fromFoldable []) }), dom: (HoleType { holeId: (HoleId (fromJust (UUID.parseUUID "2dbe89dd-fd75-48d0-ad2b-1dfe33e6d434"))), meta: HoleTypeMetadata {}, weakening: (fromFoldable []) }), meta: ArrowTypeMetadata {} }), termBind: { meta: TermBindMetadata { name: Name (Just "x") }, termId: (TermId (fromJust (UUID.parseUUID "83202802-6ae2-4b08-a09a-a52d3d163a9b"))) } }), meta: DataMetadata { indentedBody: true, indentedSumItems: true, name: Name Nothing }, sumItems: ({ meta: SumItemMetadata { indented: true }, paramItems: Nil, termBind: { meta: TermBindMetadata { name: Name (Just "zero") }, termId: (TermId (fromJust (UUID.parseUUID "82dd370d-0eaf-4255-93ad-54e7d5b443f6"))) } } : { meta: SumItemMetadata { indented: true }, paramItems: ({ meta: ParamItemMetadata { indented: false }, type_: (DataType { meta: DataTypeMetadata {}, typeId: (TypeId (fromJust (UUID.parseUUID "da2d82bb-760e-442f-b3bc-588bac7a738c"))) }) } : Nil), termBind: { meta: TermBindMetadata { name: Name (Just "suc") }, termId: (TermId (fromJust (UUID.parseUUID "081fffa6-74fe-455e-a636-1c9359f8ae87"))) } } : Nil), typeBind: { meta: TypeBindMetadata { name: Name (Just "Nat") }, typeId: (TypeId (fromJust (UUID.parseUUID "da2d82bb-760e-442f-b3bc-588bac7a738c"))) } })) [ { ix: (IxDown ((IxStep IxStepData 2) : (IxStep IxStepLet 2) : Nil)), toReplace: (ReplaceTerm (Lam { body: (Lam { body: (Hole { meta: HoleMetadata {} }), meta: LamMetadata { indentedBody: false, name: Name Nothing }, termBind: { meta: TermBindMetadata { name: Name Nothing }, termId: (TermId (fromJust (UUID.parseUUID "5a173d70-f374-4f41-a850-1bb82ef3524c"))) } }), meta: LamMetadata { indentedBody: false, name: Name Nothing }, termBind: { meta: TermBindMetadata { name: Name Nothing }, termId: (TermId (fromJust (UUID.parseUUID "092d26e5-bd18-47bd-81c5-47c744a66615"))) } }) (InsertArg (HoleType { holeId: (HoleId (fromJust (UUID.parseUUID "5d83dfc3-8c8e-42ef-b5e8-9328a8442e42"))), meta: HoleTypeMetadata {}, weakening: (fromFoldable []) }))) }, { ix: (IxDown ((IxStep IxStepData 2) : (IxStep IxStepLet 2) : Nil)), toReplace: (ReplaceTerm (Lam { body: (Hole { meta: HoleMetadata {} }), meta: LamMetadata { indentedBody: false, name: Name Nothing }, termBind: { meta: TermBindMetadata { name: Name Nothing }, termId: (TermId (fromJust (UUID.parseUUID "5a173d70-f374-4f41-a850-1bb82ef3524c"))) } }) (InsertArg (HoleType { holeId: (HoleId (fromJust (UUID.parseUUID "2dbe89dd-fd75-48d0-ad2b-1dfe33e6d434"))), meta: HoleTypeMetadata {}, weakening: (fromFoldable []) }))) } ])
    , "set x as definition of x" /\ (Tuple (Tuple (HoleType { holeId: (HoleId (fromJust (UUID.parseUUID "6bf6c549-8b39-4541-a79c-de96312fc0a6"))), meta: HoleTypeMetadata {}, weakening: (fromFoldable []) }) (Data { body: (Let { body: (Hole { meta: HoleMetadata {} }), impl: (Hole { meta: HoleMetadata {} }), meta: LetMetadata { indentedBody: true, indentedImpl: false, indentedSign: false, name: Name Nothing }, sign: (HoleType { holeId: (HoleId (fromJust (UUID.parseUUID "4c64cb16-8654-4123-a528-a85f50848025"))), meta: HoleTypeMetadata {}, weakening: (fromFoldable []) }), termBind: { meta: TermBindMetadata { name: Name (Just "x") }, termId: (TermId (fromJust (UUID.parseUUID "d19c5bed-d6ef-4550-a176-8211cd1fcf7b"))) } }), meta: DataMetadata { indentedBody: true, indentedSumItems: true, name: Name Nothing }, sumItems: ({ meta: SumItemMetadata { indented: true }, paramItems: Nil, termBind: { meta: TermBindMetadata { name: Name (Just "zero") }, termId: (TermId (fromJust (UUID.parseUUID "979642e4-77e0-4b2e-bb1c-a25f014aa773"))) } } : { meta: SumItemMetadata { indented: true }, paramItems: ({ meta: ParamItemMetadata { indented: false }, type_: (DataType { meta: DataTypeMetadata {}, typeId: (TypeId (fromJust (UUID.parseUUID "82aedfd8-dc05-49d8-a76e-29abf4f6b862"))) }) } : Nil), termBind: { meta: TermBindMetadata { name: Name (Just "suc") }, termId: (TermId (fromJust (UUID.parseUUID "d32c42f0-98b5-456d-a016-fdd31b37f964"))) } } : Nil), typeBind: { meta: TypeBindMetadata { name: Name (Just "Nat") }, typeId: (TypeId (fromJust (UUID.parseUUID "82aedfd8-dc05-49d8-a76e-29abf4f6b862"))) } })) [{ ix: (IxDown ((IxStep IxStepData 2) : (IxStep IxStepLet 2) : Nil)), toReplace: (ReplaceTerm (Neu { argItems: Nil, meta: NeuMetadata {}, termId: (TermId (fromJust (UUID.parseUUID "d19c5bed-d6ef-4550-a176-8211cd1fcf7b"))) }) NoChange) }])
    ]

-- histories :: Map String History
-- histories =
--   Map.fromFoldable
--     [ "enlambda in let impl" /\ (Tuple (Tuple (Data { body: (Let { body: (Hole { meta: HoleMetadata {} }), impl: (Hole { meta: HoleMetadata {} }), meta: LetMetadata { indentedBody: true, indentedImpl: false, indentedSign: false, name: Name Nothing }, sign: (HoleType { holeId: (HoleId (fromJust (UUID.parseUUID "115cef88-102b-4078-95b6-a096a9fa1573"))), meta: HoleTypeMetadata {}, weakening: (fromFoldable []) }), termBind: { meta: TermBindMetadata { name: Name (Just "x") }, termId: (TermId (fromJust (UUID.parseUUID "a544b42c-3186-4e53-9211-44d53464a058"))) } }), meta: DataMetadata { indentedBody: false, indentedSumItems: false, name: Name Nothing }, sumItems: ({ meta: SumItemMetadata { indented: false }, paramItems: Nil, termBind: { meta: TermBindMetadata { name: Name (Just "zero") }, termId: (TermId (fromJust (UUID.parseUUID "fa9f6650-6012-4369-bbbf-7e4af3607eb5"))) } } : { meta: SumItemMetadata { indented: false }, paramItems: ({ meta: ParamItemMetadata { indented: false }, type_: (DataType { meta: DataTypeMetadata {}, typeId: (TypeId (fromJust (UUID.parseUUID "f39f5e91-6b7f-4602-85f7-eef6f77f4971"))) }) } : Nil), termBind: { meta: TermBindMetadata { name: Name (Just "suc") }, termId: (TermId (fromJust (UUID.parseUUID "4bedc3b6-cbb9-4832-acc0-51e626e18573"))) } } : Nil), typeBind: { meta: TypeBindMetadata { name: Name (Just "Nat") }, typeId: (TypeId (fromJust (UUID.parseUUID "f39f5e91-6b7f-4602-85f7-eef6f77f4971"))) } }) (ArrowType { cod: (HoleType { holeId: (HoleId (fromJust (UUID.parseUUID "8bc4f498-39f0-41f3-8a3f-3a3bbcba8d53"))), meta: HoleTypeMetadata {}, weakening: (fromFoldable []) }), dom: (HoleType { holeId: (HoleId (fromJust (UUID.parseUUID "99fa7a94-b00d-4fe3-9a3e-353df412a769"))), meta: HoleTypeMetadata {}, weakening: (fromFoldable []) }), meta: ArrowTypeMetadata {} })) [ { mb_ix: Just $ (IxDown ((IxStep IxStepData 2) : (IxStep IxStepLet 2) : Nil)), toReplace: (ReplaceTerm (Lam { body: (Hole { meta: HoleMetadata {} }), meta: LamMetadata { indentedBody: false, name: Name Nothing }, termBind: { meta: TermBindMetadata { name: Name Nothing }, termId: (TermId (fromJust (UUID.parseUUID "757587ce-3f9a-4d1b-884e-2d7cd5de1e54"))) } }) (InsertArg (HoleType { holeId: (HoleId (fromJust (UUID.parseUUID "f1381897-f682-4c20-9ad3-c4d5d2256db8"))), meta: HoleTypeMetadata {}, weakening: (fromFoldable []) }))) } ])
--     , "enArrow codomain" /\ (Tuple (Tuple (Data { body: (Let { body: (Hole { meta: HoleMetadata {} }), impl: (Hole { meta: HoleMetadata {} }), meta: LetMetadata { indentedBody: false, indentedImpl: false, indentedSign: false, name: Name Nothing }, sign: (HoleType { holeId: (HoleId (fromJust (UUID.parseUUID "40130ea4-7be3-4bfc-9dcb-bc927a59a45e"))), meta: HoleTypeMetadata {}, weakening: (fromFoldable []) }), termBind: { meta: TermBindMetadata { name: Name (Just "x") }, termId: (TermId (fromJust (UUID.parseUUID "de8590cf-6303-4d28-b6c8-d64ee3bbeed3"))) } }), meta: DataMetadata { indentedBody: false, indentedSumItems: false, name: Name Nothing }, sumItems: ({ meta: SumItemMetadata { indented: false }, paramItems: Nil, termBind: { meta: TermBindMetadata { name: Name (Just "zero") }, termId: (TermId (fromJust (UUID.parseUUID "b758339b-2c4c-4d18-bbe2-d83b63663726"))) } } : { meta: SumItemMetadata { indented: false }, paramItems: ({ meta: ParamItemMetadata { indented: false }, type_: (DataType { meta: DataTypeMetadata {}, typeId: (TypeId (fromJust (UUID.parseUUID "479c9590-f9f9-494d-8768-501aafa985d2"))) }) } : Nil), termBind: { meta: TermBindMetadata { name: Name (Just "suc") }, termId: (TermId (fromJust (UUID.parseUUID "9229b08e-2d33-46ed-8e5a-270d10eeff5d"))) } } : Nil), typeBind: { meta: TypeBindMetadata { name: Name (Just "Nat") }, typeId: (TypeId (fromJust (UUID.parseUUID "479c9590-f9f9-494d-8768-501aafa985d2"))) } }) (ArrowType { cod: (HoleType { holeId: (HoleId (fromJust (UUID.parseUUID "be11d83f-05dc-4c59-bea7-5a101fdbd9aa"))), meta: HoleTypeMetadata {}, weakening: (fromFoldable []) }), dom: (HoleType { holeId: (HoleId (fromJust (UUID.parseUUID "465652fe-ca98-472d-ac82-a635074a4f79"))), meta: HoleTypeMetadata {}, weakening: (fromFoldable []) }), meta: ArrowTypeMetadata {} })) [ { mb_ix: Just $ (IxDown ((IxStep IxStepData 2) : (IxStep IxStepLet 1) : Nil)), toReplace: (ReplaceType (ArrowType { cod: (HoleType { holeId: (HoleId (fromJust (UUID.parseUUID "40130ea4-7be3-4bfc-9dcb-bc927a59a45e"))), meta: HoleTypeMetadata {}, weakening: (fromFoldable []) }), dom: (HoleType { holeId: (HoleId (fromJust (UUID.parseUUID "a6de0178-5190-4388-94f2-eb7ef8a93a9e"))), meta: HoleTypeMetadata {}, weakening: (fromFoldable []) }), meta: ArrowTypeMetadata {} }) (InsertArg (HoleType { holeId: (HoleId (fromJust (UUID.parseUUID "a6de0178-5190-4388-94f2-eb7ef8a93a9e"))), meta: HoleTypeMetadata {}, weakening: (fromFoldable []) }))) }, { mb_ix: Just $ (IxDown ((IxStep IxStepData 2) : (IxStep IxStepLet 1) : Nil)), toReplace: (ReplaceType (ArrowType { cod: (HoleType { holeId: (HoleId (fromJust (UUID.parseUUID "40130ea4-7be3-4bfc-9dcb-bc927a59a45e"))), meta: HoleTypeMetadata {}, weakening: (fromFoldable []) }), dom: (HoleType { holeId: (HoleId (fromJust (UUID.parseUUID "a6de0178-5190-4388-94f2-eb7ef8a93a9e"))), meta: HoleTypeMetadata {}, weakening: (fromFoldable []) }), meta: ArrowTypeMetadata {} }) (InsertArg (HoleType { holeId: (HoleId (fromJust (UUID.parseUUID "a6de0178-5190-4388-94f2-eb7ef8a93a9e"))), meta: HoleTypeMetadata {}, weakening: (fromFoldable []) }))) }, { mb_ix: Just $ (IxDown ((IxStep IxStepData 2) : (IxStep IxStepLet 1) : (IxStep IxStepArrowType 1) : Nil)), toReplace: (ReplaceType (ArrowType { cod: (HoleType { holeId: (HoleId (fromJust (UUID.parseUUID "40130ea4-7be3-4bfc-9dcb-bc927a59a45e"))), meta: HoleTypeMetadata {}, weakening: (fromFoldable []) }), dom: (HoleType { holeId: (HoleId (fromJust (UUID.parseUUID "ee9c7e50-9194-48eb-938c-0b8053b0b29b"))), meta: HoleTypeMetadata {}, weakening: (fromFoldable []) }), meta: ArrowTypeMetadata {} }) (InsertArg (HoleType { holeId: (HoleId (fromJust (UUID.parseUUID "ee9c7e50-9194-48eb-938c-0b8053b0b29b"))), meta: HoleTypeMetadata {}, weakening: (fromFoldable []) }))) } ])
--     , "enArrow then dig hole in function" /\ (Tuple (Tuple (Data { body: (Let { body: (Hole { meta: HoleMetadata {} }), impl: (Hole { meta: HoleMetadata {} }), meta: LetMetadata { indentedBody: false, indentedImpl: false, indentedSign: false, name: Name Nothing }, sign: (HoleType { holeId: (HoleId (fromJust (UUID.parseUUID "9b032917-4650-4db7-81ea-0f2e5ca6b961"))), meta: HoleTypeMetadata {}, weakening: (fromFoldable []) }), termBind: { meta: TermBindMetadata { name: Name (Just "x") }, termId: (TermId (fromJust (UUID.parseUUID "a77b9ccd-17c7-41f8-9b73-c16505c8ab49"))) } }), meta: DataMetadata { indentedBody: false, indentedSumItems: false, name: Name Nothing }, sumItems: ({ meta: SumItemMetadata { indented: false }, paramItems: Nil, termBind: { meta: TermBindMetadata { name: Name (Just "zero") }, termId: (TermId (fromJust (UUID.parseUUID "99b3aaaa-7428-4714-879f-dd1e01000b76"))) } } : { meta: SumItemMetadata { indented: false }, paramItems: ({ meta: ParamItemMetadata { indented: false }, type_: (DataType { meta: DataTypeMetadata {}, typeId: (TypeId (fromJust (UUID.parseUUID "e34163b3-9e54-4943-8524-b745d96f7757"))) }) } : Nil), termBind: { meta: TermBindMetadata { name: Name (Just "suc") }, termId: (TermId (fromJust (UUID.parseUUID "2aae587a-af8d-4cd4-91d3-1b4c239e392c"))) } } : Nil), typeBind: { meta: TypeBindMetadata { name: Name (Just "Nat") }, typeId: (TypeId (fromJust (UUID.parseUUID "e34163b3-9e54-4943-8524-b745d96f7757"))) } }) (ArrowType { cod: (HoleType { holeId: (HoleId (fromJust (UUID.parseUUID "7e69fefa-d32d-4e44-924d-a6eb7d65dd74"))), meta: HoleTypeMetadata {}, weakening: (fromFoldable []) }), dom: (HoleType { holeId: (HoleId (fromJust (UUID.parseUUID "ceaff919-2db2-4b62-a43f-cb5835b8701e"))), meta: HoleTypeMetadata {}, weakening: (fromFoldable []) }), meta: ArrowTypeMetadata {} })) [ { mb_ix: Just $ (IxDown ((IxStep IxStepData 2) : (IxStep IxStepLet 1) : Nil)), toReplace: (ReplaceType (ArrowType { cod: (HoleType { holeId: (HoleId (fromJust (UUID.parseUUID "9b032917-4650-4db7-81ea-0f2e5ca6b961"))), meta: HoleTypeMetadata {}, weakening: (fromFoldable []) }), dom: (HoleType { holeId: (HoleId (fromJust (UUID.parseUUID "9b334330-7019-4f46-9855-91200cc62f39"))), meta: HoleTypeMetadata {}, weakening: (fromFoldable []) }), meta: ArrowTypeMetadata {} }) (InsertArg (HoleType { holeId: (HoleId (fromJust (UUID.parseUUID "9b334330-7019-4f46-9855-91200cc62f39"))), meta: HoleTypeMetadata {}, weakening: (fromFoldable []) }))) }, { mb_ix: Just $ (IxDown ((IxStep IxStepData 2) : (IxStep IxStepLet 1) : Nil)), toReplace: (ReplaceType (ArrowType { cod: (HoleType { holeId: (HoleId (fromJust (UUID.parseUUID "9b032917-4650-4db7-81ea-0f2e5ca6b961"))), meta: HoleTypeMetadata {}, weakening: (fromFoldable []) }), dom: (HoleType { holeId: (HoleId (fromJust (UUID.parseUUID "9b334330-7019-4f46-9855-91200cc62f39"))), meta: HoleTypeMetadata {}, weakening: (fromFoldable []) }), meta: ArrowTypeMetadata {} }) (InsertArg (HoleType { holeId: (HoleId (fromJust (UUID.parseUUID "9b334330-7019-4f46-9855-91200cc62f39"))), meta: HoleTypeMetadata {}, weakening: (fromFoldable []) }))) }, { mb_ix: Just $ (IxDown ((IxStep IxStepData 2) : (IxStep IxStepLet 2) : (IxStep IxStepLam 1) : Nil)), toReplace: (ReplaceTerm (Hole { meta: HoleMetadata {} }) (Dig (HoleId (fromJust (UUID.parseUUID "3d559646-7f32-4d4e-b4ef-a5e3a2cac251"))))) } ])
--     ]
